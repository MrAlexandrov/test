/// https://codeforces.com/gym/101908/problem/L
#include <bits/stdc++.h>
using namespace std;
typedef int ll;

const ll INF = INT_MAX;

struct item {
    ll sum, mn;
    bool isupd, isadd;
    ll upd, add;
    item (ll val) {
        sum = mn = val;
        isupd = isadd = false;
        upd = add = 0;
    }
    item () {
        sum = 0; mn = 0;
        isupd = isadd = false;
        upd = add = 0;
    }
};

struct ST {
    ll n;
    vector <item> t;
    ST () {};
    ST (vector <ll> &a) {
        n = a.size();
        t.resize(n << 2);
        build(0, 0, n, a);
        a.clear();
    }
    item comb(const item &a, const item &b) {
        item res;
        res.sum = a.sum + b.sum;
        res.mn = min(a.mn, b.mn);
        return res;
    }
    void build(ll v, ll tl, ll tr, const vector <ll> &a) {
        if (tr - tl == 1) {
            t[v] = item(a[tl]);
            return;
        }
        ll tm = (tl + tr) >> 1;
        build(2 * v + 1, tl, tm, a);
        build(2 * v + 2, tm, tr, a);
        t[v] = comb(t[2 * v + 1], t[2 * v + 2]);
    }
    void push(ll v, ll tl, ll tr) {
        if (t[v].isupd) {
            ll val = t[v].upd;

            t[v].sum = (tr - tl) * val; t[v].mn = val;
            t[v].isupd = false;

            if (!(tr - tl == 1)) {
                t[2 * v + 1].isupd = true; t[2 * v + 1].isadd = false;
                t[2 * v + 1].upd = val; t[2 * v + 1].add = 0;

                t[2 * v + 2].isupd = true; t[2 * v + 2].isadd = false;
                t[2 * v + 2].upd = val; t[2 * v + 2].add = 0;
            }
        }
        if (t[v].isadd) {
            ll val = t[v].add;

            t[v].sum += (tr - tl) * val; t[v].mn += val;
            t[v].isadd = false;
            t[v].add = 0;

            if (!(tr - tl == 1)) {
                t[2 * v + 1].isadd = true;
                t[2 * v + 1].add += val;

                t[2 * v + 2].isadd = true;
                t[2 * v + 2].add += val;
            }
        }
    }
    ll sum(ll v, ll tl, ll tr, ll l, ll r) {
        push(v, tl, tr);
        if (r <= tl || tr <= l) {
            return 0;
        }
        if (l <= tl && tr <= r) {
            return t[v].sum;
        }
        ll tm = (tl + tr) >> 1;
        return sum(2 * v + 1, tl, tm, l, r) + sum(2 * v + 2, tm, tr, l, r);
    }
    ll mn(ll v, ll tl, ll tr, ll l, ll r) {
        push(v, tl, tr);
        if (r <= tl || tr <= l) {
            return INF;
        }
        if (l <= tl && tr <= r) {
            return t[v].mn;
        }
        ll tm = (tl + tr) >> 1;
        return min(mn(2 * v + 1, tl, tm, l, r), mn(2 * v + 2, tm, tr, l, r));
    }
    void upd(ll v, ll tl, ll tr, ll l, ll r, ll val) {
        push(v, tl, tr);
        if (r <= tl || tr <= l) {
            return;
        }
        if (l <= tl && tr <= r) {
            t[v].isupd = true; t[v].isadd = false;
            t[v].upd = val; t[v].add = 0;
            push(v, tl, tr);
            return;
        }
        ll tm = (tl + tr) >> 1;
        upd(2 * v + 1, tl, tm, l, r, val);
        upd(2 * v + 2, tm, tr, l, r, val);
        t[v] = comb(t[2 * v + 1], t[2 * v + 2]);
    }
    void add(ll v, ll tl, ll tr, ll l, ll r, ll val) {
        push(v, tl, tr);
        if (r <= tl || tr <= l) {
            return;
        }
        if (l <= tl && tr <= r) {
            t[v].isadd = true;
            t[v].add += val;
            push(v, tl, tr);
            return;
        }
        ll tm = (tl + tr) >> 1;
        add(2 * v + 1, tl, tm, l, r, val);
        add(2 * v + 2, tm, tr, l, r, val);
        t[v] = comb(t[2 * v + 1], t[2 * v + 2]);
    }
};

vector <vector <ll>> g;

struct HLD {
    ll n;
    vector <ll> parent, depth, heavy, head, val, pos;
    ST T;
    ll cur_pos = 0;
    HLD(const vector <vector <ll>> &g) {
        n = g.size();
        parent.resize(n);
        depth.resize(n);
        heavy.resize(n, -1);
        head.resize(n);
        val.resize(n, 0);
        pos.resize(n);
        depth[0] = 0;
        parent[0] = 0;
        DFS(0, 0, g);
        Decompose(0, 0);
        T = ST(val);
    }
    ll DFS(ll u, ll p, const vector <vector <ll>> &g) {
        ll sz = 1;
        ll max_to_size = 0;
        for (ll v : g[u]) {
            if (v == p) {
                continue;
            }
            parent[v] = u;
            depth[v] = depth[u] + 1;
            ll to_size = DFS(v, u, g);
            sz += to_size;
            if (to_size > max_to_size) {
                max_to_size = to_size;
                heavy[u] = v;
            }
        }
        return sz;
    }
    void Decompose(ll u, ll h) {
        head[u] = h;
        pos[u] = cur_pos++;
        if (heavy[u] != -1) {
            Decompose(heavy[u], h);
        }
        for (ll v : g[u]) {
            if (v == parent[u]) {
                continue;
            }
            if (v != heavy[u]) {
                Decompose(v, v);
            }
        }
    }
    ll sum(ll a, ll b) {
        ll res = 0;
        ll now = 0;
        for (; head[a] != head[b]; b = parent[head[b]]) {
            if (depth[head[a]] > depth[head[b]]) {
                swap(a, b);
            }
            now = T.sum(0, 0, n, pos[head[b]], pos[b] + 1);
            res += now;
        }
        if (depth[a] > depth[b]) {
            swap(a, b);
        }
        now = T.sum(0, 0, n, pos[a], pos[b] + 1);
        res += now;
        return res;
    }
    ll mn(ll a, ll b) {
        ll res = 0;
        ll now = 0;
        for (; head[a] != head[b]; b = parent[head[b]]) {
            if (depth[head[a]] > depth[head[b]]) {
                swap(a, b);
            }
            now = T.mn(0, 0, n, pos[head[b]], pos[b] + 1);
            res = min(res, now);
        }
        if (depth[a] > depth[b]) {
            swap(a, b);
        }
        now = T.mn(0, 0, n, pos[a], pos[b] + 1);
        res = min(res, now);
        return res;
    }
    void add(ll a, ll b, ll val) {
        for (; head[a] != head[b]; b = parent[head[b]]) {
            if (depth[head[a]] > depth[head[b]]) {
                swap(a, b);
            }
            T.add(0, 0, n, pos[head[b]], pos[b] + 1, val);
        }
        if (depth[a] > depth[b]) {
            swap(a, b);
        }
        T.add(0, 0, n, pos[a], pos[b] + 1, val);
    }
    void vivHLD() {
        cout << "parent\t";
        for (ll i = 0; i < n; ++i) {
            cout << parent[i] << ' ';
        }
        cout << endl << "depth\t";
        for (ll i = 0; i < n; ++i) {
            cout << depth[i] << ' ';
        }
        cout << endl << "heavy\t";
        for (ll i = 0; i < n; ++i) {
            cout << heavy[i] << ' ';
        }
        cout << endl << "head\t";
        for (ll i = 0; i < n; ++i) {
            cout << head[i] << ' ';
        }
        cout << endl << "val\t";
        for (ll i = 0; i < n; ++i) {
            cout << val[i] << ' ';
        }
        cout << endl << "pos\t";
        for (ll i = 0; i < n; ++i) {
            cout << pos[i] << ' ';
        }
        cout << endl;
    }
};

int main() {
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    ///freopen("input.in", "r", stdin);
    ///freopen("output.out", "w", stdout);
    ll n, m;
    cin >> n >> m;
    g.resize(n);
    for (ll i = 0; i < n - 1; ++i) {
        ll u, v;
        cin >> u >> v;
        --u, --v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    HLD H(g);
    for (ll i = 0; i < m; ++i) {
        ll a, b, c, d;
        cin >> a >> b >> c >> d;
        --a, --b, --c, --d;
        H.add(a, b, 1);
        ll x = H.sum(a, b);
        H.add(c, d, 1);
        ll y = H.sum(a, b);
        cout << y - x << endl;
        H.add(a, b, -1);
        H.add(c, d, -1);
    }
    return 0;
}

/**


**/
